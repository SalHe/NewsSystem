@page "/news/add"
@page "/news/edit/{newsId:int}"
@using Whu.BLM.NewsSystem.Client.Services
@using Whu.BLM.NewsSystem.Shared.Entity.Content
@using System.ComponentModel.DataAnnotations
@using Whu.BLM.NewsSystem.Shared.Entity.Identity
@inject MessageService _message
@inject INewsCategoryService _newsCategoryService
@inject INewsService _newsService
@inject NavigationManager _navigationManager

<Form Model="@News"
      LabelColSpan="4"
      WrapperColSpan="20"
      OnFinish="OnConfirmEditing">
    <FormItem Label="标题">
        <Input @bind-Value="@context.Title"/>
    </FormItem>
    <FormItem Label="URL">
        <Input @bind-Value="@context.OriginUrl"/>
    </FormItem>
    <FormItem Label="类别：">
        <Select Mode="default"
                DataSource="@NewsCategories"
                LabelName="@nameof(NewsCategory.Name)"
                ValueName="@nameof(NewsCategory.Id)"
                @bind-Value="@context.NewsCategory">
        </Select>
    </FormItem>
    <FormItem Label="摘要">
        <TextArea @bind-Value="@context.AbstractContent" MinRows="5" MaxRows="10"></TextArea>
    </FormItem>
    <div style="width: 100%; display: flex; justify-content: flex-end">
        <Button Type="@ButtonType.Default" HtmlType="submit">提交修改</Button>
    </div>
</Form>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    [Parameter]
    public int? NewsId { get; set; }

    class NewsModel
    {
        [Required(ErrorMessage = "请输入标题")]
        [MinLength(5, ErrorMessage = "摘要内容不得小于5字符")]
        public string Title { get; set; }

        [Required(ErrorMessage = "请输入新闻摘要")]
        [MinLength(20, ErrorMessage = "摘要内容不得小于20字符")]
        public string AbstractContent { get; set; }

        [Required(ErrorMessage = "请输入新闻URL")]
        [Url(ErrorMessage = "请输入一个合法的URL")]
        public string OriginUrl { get; set; }

        [Required(ErrorMessage = "请输入新闻类别")]
        [Url(ErrorMessage = "请输入一个合法的类别")]
        public int NewsCategory { get; set; }
    }

    private NewsModel News { get; set; } = new NewsModel();
    private IList<NewsCategory> NewsCategories { get; set; } = new List<NewsCategory>();

    protected override async Task OnInitializedAsync()
    {
        if (!(await AuthenticationState).User.IsInRole(UserGroup.Admin.ToString()))
        {
    // 没有权限访问编辑和添加，所以导航至首页
            await _message.Error("您无权访问本页面！");
            _navigationManager.NavigateTo("/");
        }
        NewsCategories = await _newsCategoryService.GetNewsCategoriesAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
    // TODO 获取新闻信息
        if (NewsId == null)
        {
            News = new NewsModel()
            {
                Title = string.Empty,
                OriginUrl = string.Empty,
                AbstractContent = string.Empty,
                NewsCategory = 0
            };
        }
        else
        {
            var news = await _newsService.GetNewsById(NewsId ?? 0);
            News = new NewsModel()
            {
                Title = news.Title,
                OriginUrl = news.OringinUrl,
                AbstractContent = news.AbstractContent,
                NewsCategory = news.NewsCategory.Id
            };
        }
    }

    private Task OnConfirmEditing()
    {
        if (NewsId == null)
        {
    // TODO 接入添加新闻接口
            _message.Info("您的添加已通过");
        }
        else
        {
    // TODO 接入编辑新闻接口
            _message.Info("您的编辑已通过");
        }
        return Task.CompletedTask;
    }

}